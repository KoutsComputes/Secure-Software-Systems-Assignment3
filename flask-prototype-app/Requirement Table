| #  | Requirement                                           | User Story Description                                                                                                                                                                                                                                                    | Priority | Complexity |
|----|-------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------|------------|
| 1  | Voter Confidentiality (Cryptography)                  | As a voter, I want my ballot to stay completely secret so no one, not even administrators, can trace it back to me. Strong cryptographic methods must guarantee that my identity and my choice are never linked, giving me confidence to vote freely.                     | High     | High       |
| 2  | Vote Integrity (Encryption)                           | As a voter, I want my vote to be safely locked the moment I cast it, so it cannot be altered, tampered with, or replaced while traveling through the internet or stored in databases. The system should protect my vote like banks protect money transfers.               | High     | Medium     |
| 3  | Availability & DDoS Resilience (50 req/IP)            | On election day, millions will access the platform at once. Attackers may try to overload it with fake requests. By limiting repeated requests (e.g., 50 per IP), the system ensures real voters can always cast their ballots without delays.                            | High     | Medium     |
| 4  | Non-Repudiation (Digital Signatures)                  | As an auditor, I want every action, from vote submission to system updates, to be digitally signed so no participant can deny their involvement later. This creates accountability while still protecting voter anonymity.                                                | High     | High       |
| 5  | Incident Response & Disaster Recovery                 | As an administrator, I want a tested plan that quickly detects problems such as cyberattacks, server crashes, or data corruption, responds effectively, and restores services within minutes. The system must recover seamlessly to maintain trust.                       | High     | High       |
| 6  | Voter Authentication                                  | As a voter, I want to prove my identity securely using government ID, biometrics, or multi-factor authentication so only I can log in and cast my vote. This should feel as safe as logging into my online banking account.                                               | High     | High       |
| 7  | RBAC (Frontend)                                       | As a polling clerk using the frontend system, I should only see features needed for my role, such as verifying voter eligibility, but not access sensitive data or admin dashboards. This prevents misuse, similar to hospital staff accessing only authorized records.   | Medium   | Medium     |
| 8  | RBAC (Backend)                                        | As a backend admin, I should only be able to manage the system areas my role requires, such as database maintenance, but not touch voter data or audit logs. This separation prevents insider abuse, like banks separating responsibilities between tellers and auditors. | High     | Medium     |
| 9  | Tamper-Free Logging                                   | As an auditor, I want system logs that cannot be deleted, altered, or faked. These logs should act like an airplaneâ€™s black box, where even in failures, accidents, or attacks, they must tell the true story of what happened during the election.                       | High     | High       |
| 10 | Vote Verifiability                                    | As a voter, I want a way to confirm my vote was recorded and counted without exposing who I voted for. For example, a unique receipt code could let me check my vote in the final tally. This builds transparency and trust, assuring me my ballot was not lost.          | High     | High       |
| 11 | Automatic Backups (Logs & Audits)                     | As a system, I should automatically create secure backups of logs and audits in real time. Even if a main server is wiped out by attackers or technical issues, the records remain intact for investigators.                                                              | Medium   | Medium     |
| 12 | Geolocation Restrictions (Overseas)                   | As an election authority, I want to restrict online votes from unapproved overseas regions. If laws allow voting only from certain countries, the system should detect and block votes from unauthorized locations, ensuring fairness and compliance.                     | Medium   | Medium     |
| 13 | API Rate Limiting (API Gateway)                       | As a voter, I want the system to remain fast and responsive. The API gateway should detect and block excessive requests, such as spam or bot attacks, similar to how social media platforms prevent bots from overwhelming services.                                      | High     | Medium     |
| 14 | Caching Common Data                                   | As a voter, I want frequently accessed information such as candidate lists, party manifestos, and FAQs to load instantly without delays. Caching should make the experience smooth, like browsing product lists on e-commerce sites.                                      | Medium   | Low        |
| 15 | Session Recovery                                      | As a voter, if my internet connection drops, I want to resume where I left off without restarting the whole process. Like online exams saving answers automatically, the voting system should recover my session smoothly.                                                | Medium   | Medium     |
| 16 | Database Replication (MySQL Master-Slave, Docker)     | As a system, I should replicate votes across multiple databases in a master-slave setup. If one server goes down, another should instantly take over. This ensures no data is lost, similar to banking systems safeguarding transactions.                                 | High     | High       |
| 17 | Saved Backups                                         | As an administrator, I want multiple backup versions (daily, weekly, monthly) stored in secure locations so the system can be restored quickly after accidents, attacks, or corruption. Like storing photos on drives and cloud, nothing should be lost.                  | High     | Medium     |
| 18 | Minimal Downtime (Multiple Instances + Beyond Docker) | As a voter, I expect the system to remain online even during upgrades or maintenance. Multiple active instances should ensure continuity, like Netflix or Spotify staying online during updates without interruption.                                                     | High     | High       |
| 19 | HTTPS/TLS Everywhere                                  | As a voter, I want to feel safe knowing my connection is encrypted end-to-end. Even on public Wi-Fi, no one should intercept my data. Enforcing HTTPS/TLS everywhere guarantees secure communication, like e-commerce platforms protecting payment details.               | High     | Low        |
| 20 | Input Validation                                      | As a system, I must check all user inputs, such as names, IDs, and forms, to prevent attackers from sneaking in malicious commands. Like airport security screening every bag, this ensures no harmful data enters the system.                                            | High     | Low        |
